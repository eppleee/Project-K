---
import "@/styles/globals.css";
import Nav from "@/components/Nav.tsx";

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="pretty website for a pretty girl" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="flex flex-col min-h-screen font-sans antialiased bg-[#f7bbcd]">
    <Nav />dr
    <button
      id="theme-toggle"
      class="fixed top-4 right-4 p-2 rounded-lg bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors z-[100]"
      aria-label="Toggle dark mode"
    >
      <svg
        class="w-6 h-6 dark:hidden text-[#f474b6]"
        fill="currentColor"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"
        ></path>
      </svg>
      <svg
        class="w-6 h-6 hidden dark:block text-[#f474b6]"
        fill="currentColor"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"
        ></path>
      </svg>
    </button>
    <main
      class="flex items-center justify-center flex-grow scrollbar-thumb-primary scrollbar-thin scrollbar-track-secondary pt-16"
    >
      <slot />
    </main>
  </body>
</html>

<script>
  // Wait for the DOM to be fully loaded
  document.addEventListener("DOMContentLoaded", () => {
    // Check for saved theme preference, otherwise use system preference
    const theme = (() => {
      if (
        typeof localStorage !== "undefined" &&
        localStorage.getItem("theme")
      ) {
        return localStorage.getItem("theme");
      }
      if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
        return "dark";
      }
      return "light";
    })();

    // Set initial theme
    if (theme === "dark") {
      document.documentElement.classList.add("dark");
    }

    // Theme toggle handler
    const handleToggleClick = () => {
      const element = document.documentElement;
      element.classList.toggle("dark");

      const isDark = element.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    };

    // Add click event listener to the button
    const themeToggle = document.getElementById("theme-toggle");
    if (themeToggle) {
      themeToggle.addEventListener("click", handleToggleClick);
    } else {
      console.error("Theme toggle button not found!");
    }
  });
</script>
